{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 8, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///Users/adrianlam/Documents/Github/adrians-research-engine/apps/web/app/api/search/route.ts"],"sourcesContent":["import { XMLParser } from \"fast-xml-parser\";\nimport { type NextRequest, NextResponse } from \"next/server\";\n\ninterface SearchMetadata {\n\ttitle: string;\n\tid: string;\n\tupdated: string;\n\ttotalResults: number;\n\tstart: number;\n\titemsPerPage: number;\n}\n\ninterface FeedEntry {\n\tid: string;\n\tupdated: string;\n\tpublished: string;\n\ttitle: string;\n\tsummary: string;\n\tauthor: {\n\t\tname: string;\n\t}[];\n}\n\nexport async function GET(request: NextRequest) {\n\tconst url = \"https://export.arxiv.org/api/query\";\n\n\t// Basic parameters\n\tconst query = request.nextUrl.searchParams.get(\"query\") || \"\";\n\tconst start = request.nextUrl.searchParams.get(\"start\") || \"0\";\n\tconst max_results = request.nextUrl.searchParams.get(\"max_results\") || \"20\";\n\n\t// Filter parameters\n\t// const dateRange = request.nextUrl.searchParams.get(\"date_range\");\n\tconst sortBy = request.nextUrl.searchParams.get(\"sort_by\");\n\tconst categories = request.nextUrl.searchParams.get(\"categories\");\n\n\t// Build the search query with filters\n\tlet searchQuery = `all:${query}`;\n\n\t// Add date range filter if specified\n\t// if (dateRange && dateRange !== \"all_time\") {\n\t// \tconst now = new Date();\n\t// \tconst startDate = new Date();\n\n\t// \tswitch (dateRange) {\n\t// \t\tcase \"last_week\":\n\t// \t\t\tstartDate.setDate(now.getDate() - 7);\n\t// \t\t\tbreak;\n\t// \t\tcase \"last_month\":\n\t// \t\t\tstartDate.setMonth(now.getMonth() - 1);\n\t// \t\t\tbreak;\n\t// \t\tcase \"last_year\":\n\t// \t\t\tstartDate.setFullYear(now.getFullYear() - 1);\n\t// \t\t\tbreak;\n\t// \t\tcase \"last_5_years\":\n\t// \t\t\tstartDate.setFullYear(now.getFullYear() - 5);\n\t// \t\t\tbreak;\n\t// \t}\n\n\t// \t// Format date as YYYYMMDD0000 (midnight GMT)\n\t// \tconst formatDateForArxiv = (date: Date) => {\n\t// \t\treturn date.toISOString().slice(0, 10).replace(/-/g, \"\") + \"0000\";\n\t// \t};\n\n\t// \tconst formattedStartDate = formatDateForArxiv(startDate);\n\t// \tconst formattedEndDate = formatDateForArxiv(new Date()); // Current date\n\n\t// \tsearchQuery += `+AND+submittedDate:[${formattedStartDate}+TO+${formattedEndDate}]`;\n\t// }\n\n\t// Add category filters\n\tif (categories) {\n\t\tconst categoryList = categories.split(\",\");\n\t\tif (categoryList.length > 0) {\n\t\t\tconst categoryFilter = categoryList\n\t\t\t\t.map((cat) => `cat:${cat}`)\n\t\t\t\t.join(\"+OR+\");\n\t\t\tsearchQuery += `+AND+(${categoryFilter})`;\n\t\t}\n\t}\n\n\t// Build the query parameters\n\tconst searchParams = new URLSearchParams();\n\tsearchParams.set(\"search_query\", searchQuery);\n\tsearchParams.set(\"start\", start);\n\tsearchParams.set(\"max_results\", max_results);\n\n\t// Add sort parameters if specified\n\tif (sortBy) {\n\t\tlet sortOrder;\n\t\tlet sortDirection;\n\n\t\tswitch (sortBy) {\n\t\t\tcase \"date_new\":\n\t\t\t\tsortOrder = \"submittedDate\";\n\t\t\t\tsortDirection = \"descending\";\n\t\t\t\tbreak;\n\t\t\tcase \"date_old\":\n\t\t\t\tsortOrder = \"submittedDate\";\n\t\t\t\tsortDirection = \"ascending\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// ArXiv defaults to relevance sorting\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (sortOrder) {\n\t\t\tsearchParams.set(\"sortBy\", sortOrder);\n\t\t\tsearchParams.set(\"sortOrder\", sortDirection || \"descending\");\n\t\t}\n\t}\n\n\tconsole.log(`Searching arXiv with query: ${searchQuery}`);\n\n\tconst fullUrl = `${url}?${searchParams.toString()}`;\n\tconsole.log(`Full URL: ${fullUrl}`);\n\n\ttry {\n\t\tconst response = await fetch(fullUrl);\n\n\t\tif (!response.ok) {\n\t\t\treturn NextResponse.json(\n\t\t\t\t{ error: `API request failed with status ${response.status}` },\n\t\t\t\t{ status: response.status },\n\t\t\t);\n\t\t}\n\n\t\tconst responseData = await response.text();\n\t\tconst parser = new XMLParser();\n\t\tconst jObj = parser.parse(responseData);\n\n\t\t// Handle case where no results are found\n\t\tif (!jObj.feed.entry) {\n\t\t\treturn NextResponse.json({\n\t\t\t\tdata: [],\n\t\t\t\tmetadata: {\n\t\t\t\t\ttitle: jObj.feed.title,\n\t\t\t\t\tid: jObj.feed.id,\n\t\t\t\t\tupdated: jObj.feed.updated,\n\t\t\t\t\ttotalResults: 0,\n\t\t\t\t\tstart: Number(start),\n\t\t\t\t\titemsPerPage: Number(max_results),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\t// Convert entry to array if it's a single object\n\t\tconst entries = Array.isArray(jObj.feed.entry)\n\t\t\t? jObj.feed.entry\n\t\t\t: [jObj.feed.entry];\n\n\t\tconst data: FeedEntry[] = entries.map((entry) => ({\n\t\t\tid: entry.id,\n\t\t\tupdated: entry.updated,\n\t\t\tpublished: entry.published,\n\t\t\ttitle: entry.title,\n\t\t\tsummary: entry.summary,\n\t\t\tauthor: entry.author,\n\t\t}));\n\n\t\tconst metadata: SearchMetadata = {\n\t\t\ttitle: jObj.feed.title,\n\t\t\tid: jObj.feed.id,\n\t\t\tupdated: jObj.feed.updated,\n\t\t\ttotalResults: Number.parseInt(jObj.feed[\"opensearch:totalResults\"]),\n\t\t\tstart: Number.parseInt(jObj.feed[\"opensearch:startIndex\"]),\n\t\t\titemsPerPage: Number.parseInt(jObj.feed[\"opensearch:itemsPerPage\"]),\n\t\t};\n\n\t\treturn NextResponse.json({\n\t\t\tdata,\n\t\t\tmetadata,\n\t\t});\n\t} catch (error) {\n\t\tconsole.error(\"Error fetching from arXiv API:\", error);\n\t\treturn NextResponse.json(\n\t\t\t{ error: \"Failed to fetch from arXiv API\" },\n\t\t\t{ status: 500 },\n\t\t);\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}